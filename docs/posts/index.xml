<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Julio&#39;z Blog</title>
		<link>http://example.org/posts/</link>
		<description>Recent content in Posts on Julio&#39;z Blog</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Tue, 01 Sep 2020 21:55:55 -0500</lastBuildDate>
		<atom:link href="http://example.org/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>Swift</title>
			<link>http://example.org/posts/swift/</link>
			<pubDate>Tue, 01 Sep 2020 21:55:55 -0500</pubDate>
			
			<guid>http://example.org/posts/swift/</guid>
			<description>Getting Started First, download and install Xcode, its available on the App Store. Make sure to download Xcode 8 or higher.
Get started with a playground and Create a new Xcode Project. Playsground were released in Xcode6. They provide an interactive enviroment for rapidly developing and evaluating Swift code. A playground does not require that you compile and run a complete project. Instead, playgrouunds evaluate your Swift code on the fly, so its udeal for testing and experimenting with the Swift languaje in a lightweght enviroment.</description>
			<content type="html"><![CDATA[<h1 id="getting-started">Getting Started</h1>
<p>First, download and install Xcode, its available on the App Store. Make sure to download Xcode 8 or higher.</p>
<p>Get started with a playground and Create a new Xcode Project. Playsground were released in Xcode6. They provide an interactive enviroment for rapidly developing and evaluating Swift code. A playground does not require that you compile and run a complete project. Instead, playgrouunds evaluate your Swift code on the fly, so its udeal for testing and experimenting with the Swift languaje in a lightweght enviroment.</p>
<p>From the welcomescreen, select Get started with a playground, next, name your playground <em>MyPlayground</em>. For the plataform (iOS, macOS, or tvOS), select macOS. Finally, you are prompted to save your playground</p>
<div class="highlight"><pre class="chroma"><code class="language-swift" data-lang="swift"><span class="c1">//: Playground - noun: a place where people can play</span>

<span class="kd">import</span> <span class="nc">Cocoa</span>

<span class="kd">var</span> <span class="nv">str</span> <span class="p">=</span> <span class="s">&#34;Hello, playground&#34;</span>
<span class="n">str</span> <span class="o">+=</span> <span class="s">&#34;!&#34;</span>
</code></pre></div><h1 id="types-constants-and-variables">Types, Constants, and Variables</h1>
<h2 id="types-strings">Types, Strings</h2>
<p>Variables and constants hava a data type. Here, you have assigned an instance of the <em>String</em> type. The type assignment operator (=) assigns the value on its right side to whatever is on its left side.
Swift uses type inference to determine the data type of your variable; the quotation marks indicate that it is a <em>String</em> literal.</p>
<div class="highlight"><pre class="chroma"><code class="language-swift" data-lang="swift"><span class="kd">var</span> <span class="nv">variableString</span><span class="p">:</span> <span class="nb">String</span>
<span class="kd">var</span> <span class="nv">otherVariableString</span> <span class="p">=</span> <span class="s">&#34;Four&#34;</span>

<span class="n">otherVariableString</span> <span class="o">+=</span> <span class="s">&#34; add another thing&#34;</span>
<span class="bp">print</span><span class="p">(</span><span class="n">otherVariableString</span><span class="p">)</span>
</code></pre></div><h2 id="numerical-type">Numerical Type</h2>
<p>Now, we are explicitly declaring the variable to be th Int type using Swift&rsquo;s type annotation syntax. The colon on tje code above represents the phrase <em>&ldquo;of type&rdquo;</em></p>
<div class="highlight"><pre class="chroma"><code class="language-swift" data-lang="swift"><span class="kd">var</span> <span class="nv">variableInteger</span><span class="p">:</span> <span class="nb">Int</span>
<span class="kd">var</span> <span class="nv">otherVariableInteger</span><span class="p">:</span> <span class="nb">Int</span> <span class="p">=</span> <span class="mi">4</span>

<span class="n">otherVariableInteger</span> <span class="o">+=</span> <span class="mi">2</span>
<span class="bp">print</span><span class="p">(</span><span class="n">otherVariableInteger</span><span class="p">)</span>
</code></pre></div><h2 id="constants">Constants</h2>
<p>We will want to create instances with values that do not change.</p>
<div class="highlight"><pre class="chroma"><code class="language-swift" data-lang="swift"><span class="kd">let</span> <span class="nv">constantInteger</span><span class="p">:</span> <span class="nb">Int</span> <span class="p">=</span> <span class="mi">4</span>
<span class="kd">let</span> <span class="nv">constantString</span><span class="p">:</span> <span class="nb">String</span> <span class="p">=</span> <span class="s">&#34;This a String&#34;</span>

<span class="n">constantInteger</span> <span class="o">+=</span> <span class="mi">4</span> <span class="c1">//Error</span>
</code></pre></div><h2 id="string-interpolation">String interpolation</h2>
<p>String interpolation lets you combine constant and variables into a new string.</p>
<div class="highlight"><pre class="chroma"><code class="language-swift" data-lang="swift"><span class="kd">var</span> <span class="nv">variableInteger</span><span class="p">:</span> <span class="nb">Int</span> <span class="p">=</span> <span class="mi">4</span>
<span class="kd">var</span> <span class="nv">variableString</span><span class="p">:</span> <span class="nb">String</span> <span class="p">=</span> <span class="s">&#34;String&#34;</span>
<span class="kd">let</span> <span class="nv">constant</span><span class="p">:</span> <span class="nb">String</span> <span class="p">=</span> <span class="s">&#34;You can use the interpolation in all variables and constants, like </span><span class="si">\(</span><span class="n">variableInteger</span><span class="si">)</span><span class="s"> and </span><span class="si">\(</span><span class="n">variableString</span><span class="si">)</span><span class="s">&#34;</span>
<span class="bp">print</span><span class="p">(</span><span class="n">constant</span><span class="p">)</span>
</code></pre></div><h1 id="conditional">Conditional</h1>
]]></content>
		</item>
		
	</channel>
</rss>
